FlowNote {
  Expression
    = NodeTypes
    | FlowTypes
    | PathTypes
    | Import
    | EmptyListOf<Nodes, Channel>

  FlowTypes
    = LinguisticFlowDefinition
  NodeTypes
    = LinguisticNodeDefinition
  PathTypes
    = LinguisticPath

  LinguisticFlowDefinition = Concept "Flow" "(" HttpMethods "/" ListOf<label, "/"> ")" Properties? "is" NonemptyListOf<LinguisticNodes, LinguisticPathSeparator>

  LinguisticNodeDefinition = Concept "Node" "is" LinguisticActions

  LinguisticActionsPlural = ListOf<Concept, ","> "and" Concept
  LinguisticActionsSingular = Concept
  LinguisticActions
    = LinguisticActionsPlural
    | LinguisticActionsSingular

  LinguisticPath = LinguisticStandardNode LinguisticChannel NonemptyListOf<LinguisticNodes, LinguisticPathSeparator>

  LinguisticPathSeparator = "that" LinguisticChannel

  Import = "import" "\"" label "."? label? "\""

  LinguisticNodes
    = LinguisticMilestone
    | LinguisticNode

  LinguisticMilestone = LinguisticNode "then commits"

  LinguisticNode
    = LinguisticWaitsFor
    | LinguisticNodeBase

  LinguisticWaitsFor = LinguisticNodeBase "but waits for" LinguisticStandardNode

  LinguisticNodeBase
    = LinguisticSilentNode
    | LinguisticIdentityNode
    | LinguisticStandardNode
  LinguisticSilentNode = "a silent" LinguisticStandardNode
  LinguisticIdentityNode = LinguisticStandardNode "(as" Concept ")"
  LinguisticStandardNode = Concept

  Concept = NonemptyListOf<label, space>

  LinguisticChannel
    = LinguisticErrorChannel
    | LinguisticPlainChannel
    | LinguisticNamedChannel

  LinguisticErrorChannel = "errors with" Concept Properties? "to"
  LinguisticPlainChannel = "connects" Properties? "to"
  LinguisticNamedChannel = "connects with" Concept Properties? "to"

  Properties = "{" ListOf<Property, ","> "}"
  Property = label ":" label

  HttpMethods
    = "GET"
    | "POST"
    | "PUT"
    | "DELETE"
    | "OPTIONS"
    | "HEAD"

  label = (alnum|"_")+
  string  (a string literal) = "\"" (~"\"" ~"\n" any)* "\""
  number  (a number literal)
    = fraction
    | whole
  fraction = digit* "." digit+
  whole = digit+
  space += comment
  comment
    = multiLineComment
    | singleLineComment
  multiLineComment = "/*" (~"*/" any)* "*/"
  singleLineComment = "//" (~"\n" any)*
}
