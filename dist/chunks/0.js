(window.webpackJsonpFlowNote=window.webpackJsonpFlowNote||[]).push([[0],{132:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){const t=new o.default(e);return{Expression:t.Expression,FlowTypes:t.FlowTypes,NodeTypes:t.NodeTypes,PathTypes:t.PathTypes,FlowDefinition:(e,n,i,o,a,s,r,l,d,c)=>t.FlowDefinition(n,o,s,l,c),NodeDefinition:(e,n,i,o,a)=>t.NodeDefinition(n,i,a),Actions:e=>t.Actions(e),Path:(e,n,i)=>t.Path(e,n,i),NonemptyListOf:(e,n,i)=>t.NonemptyListOf(e,n,i),EmptyListOf:()=>[],Import:(e,i)=>t.Import(i,n),Nodes:e=>t.Nodes(e),Milestone:(e,n)=>t.Milestone(e),Node:e=>t.Node(e),WaitFor:(e,n,i)=>t.WaitFor(e,i),NodeBase:e=>t.NodeBase(e),SilentNode:(e,n)=>t.SilentNode(e),IdentityNode:(e,n,i)=>t.IdentityNode(e,i),StandardNode:e=>t.StandardNode(e),Channel:e=>t.Channel(e),ErrorChannel:(e,n,i,o)=>t.ErrorChannel(n,i),PlainChannel:(e,n,i)=>t.PlainChannel(n),NamedChannel:(e,n,i,o)=>t.NamedChannel(n,i),Properties:(e,n,i)=>t.Properties(n),Property:(e,n,i)=>t.Property(e,i),HttpMethods:e=>t.HttpMethods(e),label:e=>t.label(e),string:(e,n,i)=>t.string(n),_terminal:()=>this.primitiveValue,alnum:e=>e.sourceString,digit:e=>e.sourceString,number:e=>t.number(e),fraction:(e,n,i)=>t.fraction(e,n,i),whole:e=>t.whole(e),space:e=>t.space(e),comment:e=>t.comment(e),multiLineComment:(e,n,i)=>t.multiLineComment(n),singleLineComment:(e,n)=>t.singleLineComment(e,n)}};var i,o=(i=t(134))&&i.__esModule?i:{default:i}},133:function(e,n,t){"use strict";var i,o=(i=t(134))&&i.__esModule?i:{default:i};e.exports=function(e,n){const t=new o.default(e);return{Expression:t.Expression,FlowTypes:t.FlowTypes,NodeTypes:t.NodeTypes,PathTypes:t.PathTypes,LinguisticFlowDefinition:(e,n,i,o,a,s,r,l,d,c,u)=>t.FlowDefinition(e,o,s,l,u),LinguisticNodeDefinition:(e,n,i,o)=>t.NodeDefinition(e,{},o),LinguisticActionsPlural:(e,n,t)=>{},LinguisticActionsSingular:e=>{},LinguisticActions:e=>{},NonemptyListOf:t.NonemptyListOf,LinguisticPath:t.Path,LinguisticPathSeparator:(e,n)=>n.eval(),Import:(e,n,i,o,a)=>t.Import(i,a),LinguisticNodes:t.Nodes,LinguisticMilestone:t.Milestone,LinguisticNode:t.Node,LinguisticWaitsFor:(e,n,i)=>t.WaitsFor(e,i),LinguisticNodeBase:t.NodeBase,LinguisticSilentNode:(e,n)=>t.SilentNode(n),LinguisticIdentityNode:(e,n,i,o)=>t.IdentityNode(e,i),LinguisticStandardNode:t.StandardNode,Concept:t.Concept,LinguisticChannel:t.Channel,LinguisticErrorChannel:(e,n,i,o)=>t.ErrorChannel(n,i),LinguisticPlainChannel:(e,n,i)=>t.PlainChannel(n),LinguisticNamedChannel:(e,n,i,o)=>t.NamedChannel(n,i),Properties:(e,n,i)=>t.Properties(n),Property:(e,n,i)=>t.Property(e,i),HttpMethods:t.HttpMethods,label:t.label,string:(e,n,i)=>t.string(n),_terminal:()=>this.primitiveValue,number:t.number,fraction:t.fraction,whole:t.whole,space:t.space,comment:t.comment,multiLineComment:t.multiLineComment,singleLineComment:t.singleLineComment}}},134:function(e,n,t){"use strict";(function(e){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=c(t(6)),o=c(t(27)),a=c(t(41)),s=c(t(136)),r=c(t(39)),l=c(t(40)),d=c(t(8));function c(e){return e&&e.__esModule?e:{default:e}}const u=t(28);n.default=class{constructor(e){this.application=e,this.nodeFactories={},this.nodeAliases={}}getNodeInstance(e){const n=this.nodeFactories[e]||{tags:[],actions:[]};return new r.default(this.application,void 0,e,void 0,n.tags,n.actions)}FlowTypes(e){return e.eval()}NodeTypes(e){return e.eval()}PathTypes(e){return e.eval()}Expression(e){return e.eval()}FlowDefinition(e,n,t,i,o){const a=n.eval(),s="/"+t.eval().join("/");if(this.application.getFlowByHttp(a,s))throw new Error(`Flow definition already exists for the ${a} ${s} endpoint.`);const l=new d.default(this.application,void 0,e.eval(),i.eval(),void 0,a,s,void 0),c=o.eval(),u=c[0];let p=c[0];for(var h=1,f=c.length;h<f;h++){const e=c[h];if(void 0!==e){if(p instanceof r.default){const e=p.hasMilestone();e&&(p=e)}p.connect(e),p=e}}l.connect(u),this.application.registerFlow(l)}NodeDefinition(e,n,t){const i=e.eval();if(this.nodeAliases[i])return this.nodeAliases[i];if(void 0!==this.nodeFactories[i])throw new Error(`Node definition already exists for the ${i}.`);this.nodeFactories[i]={tags:[],config:n.eval(),actions:t.eval()}}Actions(e){const n=e.eval(),t=[];return n.forEach(e=>{if(void 0!==e){const n=this.application.requireAction(e,new Function(`return function ${e} () {\n          // @TODO Fill out this stub\n        }`)());t.push(n)}}),t}Path(e,n,t){const i=e.eval(),o=n.eval(),a=t.eval();let s=o;return a.forEach(e=>{if(void 0!==e){if(s instanceof r.default){const e=s.hasMilestone();e&&(s=e)}s.connect(e),s=e}}),i.connect(o),i}NonemptyListOf(e,n,t){const i=e.eval(),o=e.ctorName;if(void 0===i)return[];if("Nodes"===o){const e=n.eval(),o=t.eval(),r=[i];for(var a=0,s=e.length;a<s;a++)r.push(e[a]),r.push(o[a]);return r}if("Property"===o)return i.concat(t.eval());if("label"===o)return[i].concat(t.eval());throw new Error("Unknown ctorName: "+o)}Import(n,i){const o=n.eval();if(o.indexOf("//")>-1);else{const n=o.substr(o.lastIndexOf(".")+1).toLowerCase();if("js"===n||"mjs"===n){let n=t(137)(`${e.cwd()}/${o}`);n.default&&(n=n.default),n.forEach(e=>{this.application.registerAction(e.name,e)})}else{if("flow"!==n)throw new RangeError("Import only supports .js files or .flow files");{const n=u.readFileSync(`${e.cwd()}/${o}`).toString();i.compile(n)}}}}Nodes(e){return e.eval()}LinguisticNodes(e){return e.eval()}Milestone(e){const n=e.eval(),t=new o.default(this.application,void 0,"Plain",void 0,[]),i=new l.default(this.application,void 0,"Milestone","fcfs",[],[]);return i.config.silent=n.config.silent,n.connect(t),t.connect(i),n}LinguisticMilestone(e){return new l.default(this.application,void 0,"Milestone","fcfs",[],[])}Node(e){return e.eval()}WaitFor(e,n){const t=e.eval(),o=n.eval(),a=new i.default(this.application,void 0,`waitFor${o}`,async function(){await this.waitFor(o)});return t.addAction(a,t.actions.length-1),t}NodeBase(e){return e.eval()}SilentNode(e){const n=e.eval();if(this.nodeAliases[n.name])throw new Error("Cannot modify labeled a Path root.");return n.config.silent=!0,n}IdentityNode(e,n){const t=e.eval(),i=n.eval();return this.nodeAliases[i]||(this.nodeAliases[i]=t),this.nodeAliases[i]}StandardNode(e){const n=e.eval();return this.nodeAliases[n]?this.nodeAliases[n]:this.getNodeInstance(n)}Concept(e){const n=[];return e.forEach(e=>{void 0!==e&&n.push(e.eval())}),n.join(" ")}Channel(e){return e.eval()}ErrorChannel(e,n){const t=e.eval(),i=n.eval();return new a.default(this.application,void 0,t,void 0,[t],i.retry,i.retryDelay,[])}PlainChannel(e){const n=e.eval();return new o.default(this.application,void 0,"Plain",void 0,[],n.retry,n.retryDelay,[])}NamedChannel(e,n){const t=e.eval(),i=n.eval();return new s.default(this.application,void 0,t,void 0,[t],i.retry,i.retryDelay,[])}Properties(e){const n={};return e.eval().forEach(e=>{void 0!==e&&(n[e[0]]=e[1])}),n}Property(e,n){return[e.eval(),n.eval()]}HttpMethods(e){return e.eval()}label(e){return e.eval().join("")}string(e){return e.sourceString}number(e){return e.eval()}fraction(e,n,t){const i=e.eval(),o="0."+t.eval();return Number(i)+Number(o)}whole(e){return Number(e.eval())}space(e){return e.eval()}comment(e){return e.eval()}multiLineComment(e){return e.eval()}singleLineComment(e,n){return n.eval()}}}).call(this,t(7))},135:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i,o=(i=t(6))&&i.__esModule?i:{default:i};const a=[new o.default(void 0,void 0,"extractClickData",function(){this.set("click",this.get("click"))}),new o.default(void 0,void 0,"extractPlayerId",function(){this.set("playerId",this.get("playerId"))}),new o.default(void 0,void 0,"getXYCoordsFromClickData",function(){this.set("clickX",this.get("click").x),this.set("clickY",this.get("click").y),this.dispatch("Coordinates")}),new o.default(void 0,void 0,"getPlayerById",function(){this.set("player",{id:this.get("playerId"),name:"Alice",x:10,y:12})}),new o.default(void 0,void 0,"detectPlayerMovementEvents",function(){(this.get("events")||[]).forEach(e=>{"move"===e.type&&this.set("pendingMove",e)})}),new o.default(void 0,void 0,"movePlayer",function(){const e=this.get("player");e.x+=this.get("clickX"),e.y+=this.get("clickY")}),new o.default(void 0,void 0,"dispatchPlayerMovementEvents",function(){this.dispatch("playerMoved")}),new o.default(void 0,void 0,"sendBoundaryError",function(){this.dispatch("BoundaryError")}),new o.default(void 0,void 0,"getBroadcastMessage",function(){this.set("broadcastMessage","Player Moved")}),new o.default(void 0,void 0,"getRoomByPlayerId",function(){this.set("broadcastRoomId",1)}),new o.default(void 0,void 0,"broadcastToRoom",function(){this.dispatch(`broadcast:${this.get("broadcastRoomId")}`,this.get("broadcastMessage"))})];n.default=a},136:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i,o=(i=t(3))&&i.__esModule?i:{default:i};n.default=class extends o.default{constructor(e,n,t,i,o=[],a,s,r=[]){const l=e.requireAction("gotoNodeFromNamedChannel",function(){this.dispatch("StandardNode")});super(e,n,t,i,o,a,s,r.concat([l]))}}},137:function(e,n,t){var i={"./":26,"./default-semantics":132,"./default-semantics.js":132,"./default.ohm":138,"./english-semantics":133,"./english-semantics.js":133,"./english.ohm":139,"./generator":134,"./generator.js":134,"./index":26,"./index.js":26,"./semantics":38,"./semantics.js":38,"./test.flow":140,"./testActions":135,"./testActions.js":135};function o(e){var n=a(e);return t(n)}function a(e){if(!t.o(i,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return i[e]}o.keys=function(){return Object.keys(i)},o.resolve=a,e.exports=o,o.id=137},138:function(e,n,t){"use strict";t.r(n),n.default='FlowNote {\n  Expression\n    = NodeTypes\n    | FlowTypes\n    | Import \n    | PathTypes\n    | comment\n    | EmptyListOf<Nodes, Channel>\n\n  FlowTypes\n    = FlowDefinition\n  NodeTypes\n    = NodeDefinition\n  PathTypes\n    = Path\n\n  FlowDefinition = "flow" label "(" HttpMethods "/" ListOf<label, "/"> ")" Properties? "=" NonemptyListOf<Nodes, Channel>\n\n  NodeDefinition = "node" label Properties? "=" Actions\n\n  Actions = ListOf<label, ",">\n\n  Path = StandardNode Channel NonemptyListOf<Nodes, Channel>\n\n  Import = "import" string\n\n  Nodes\n    = WaitFor\n    | Node\n\n  WaitFor = Node "..." label\n\n  Node\n    = IdentityNode\n    | NodeBase\n\n  IdentityNode = NodeBase "#" label\n\n  NodeBase\n    = Milestone\n    | SilentNode\n    | StandardNode\n\n  Milestone \n    = StandardNode "*"\n    | SilentNode "*"\n\n  SilentNode = StandardNode "$"\n\n  StandardNode = label\n  \n  Channel\n    = ErrorChannel\n    | NamedChannel\n    | PlainChannel\n\n  ErrorChannel = "-" label Properties? "!"\n  NamedChannel = "-" label Properties? ">"\n  PlainChannel = "-" Properties? ">"\n\n  Properties = "{" ListOf<Property, ","> "}"\n  Property = label ":" label\n\n  HttpMethods\n    = "GET"\n    | "POST"\n    | "PUT"\n    | "DELETE"\n    | "OPTIONS"\n    | "HEAD"\n\n  label = (alnum|"_")+\n  string  (a string literal) = "\\"" (~"\\"" ~"\\n" any)* "\\""\n  number  (a number literal)\n    = fraction\n    | whole\n  fraction = digit* "." digit+\n  whole = digit+\n  space += comment\n  comment\n    = multiLineComment\n    | singleLineComment\n  multiLineComment = "/*" (~"*/" any)* "*/"\n  singleLineComment = "//" (~"\\n" any)*\n}\n'},139:function(e,n,t){"use strict";t.r(n),n.default='FlowNote {\n  Expression\n    = NodeTypes\n    | FlowTypes\n    | PathTypes\n    | Import\n    | EmptyListOf<Nodes, Channel>\n\n  FlowTypes\n    = LinguisticFlowDefinition\n  NodeTypes\n    = LinguisticNodeDefinition\n  PathTypes\n    = LinguisticPath\n\n  LinguisticFlowDefinition = Concept "Flow" "(" HttpMethods "/" ListOf<label, "/"> ")" Properties? "is" NonemptyListOf<LinguisticNodes, LinguisticPathSeparator>\n\n  LinguisticNodeDefinition = Concept "Node" "is" LinguisticActions\n\n  LinguisticActionsPlural = ListOf<Concept, ","> "and" Concept\n  LinguisticActionsSingular = Concept\n  LinguisticActions\n    = LinguisticActionsPlural\n    | LinguisticActionsSingular\n\n  LinguisticPath = LinguisticStandardNode LinguisticChannel NonemptyListOf<LinguisticNodes, LinguisticPathSeparator>\n\n  LinguisticPathSeparator = "that" LinguisticChannel\n\n  Import = "import" "\\"" label "."? label? "\\""\n\n  LinguisticNodes\n    = LinguisticMilestone\n    | LinguisticNode\n\n  LinguisticMilestone = LinguisticNode "then commits"\n\n  LinguisticNode\n    = LinguisticWaitFor\n    | LinguisticNodeBase\n\n  LinguisticWaitFor = LinguisticNodeBase "but waits for" LinguisticStandardNode\n\n  LinguisticNodeBase\n    = LinguisticSilentNode\n    | LinguisticIdentityNode\n    | LinguisticStandardNode\n  LinguisticSilentNode = "a silent" LinguisticStandardNode\n  LinguisticIdentityNode = LinguisticStandardNode "(as" Concept ")"\n  LinguisticStandardNode = Concept\n\n  Concept = NonemptyListOf<label, space>\n\n  LinguisticChannel\n    = LinguisticErrorChannel\n    | LinguisticPlainChannel\n    | LinguisticNamedChannel\n\n  LinguisticErrorChannel = "errors with" Concept Properties? "to"\n  LinguisticPlainChannel = "connects" Properties? "to"\n  LinguisticNamedChannel = "connects with" Concept Properties? "to"\n\n  Properties = "{" ListOf<Property, ","> "}"\n  Property = label ":" label\n\n  HttpMethods\n    = "GET"\n    | "POST"\n    | "PUT"\n    | "DELETE"\n    | "OPTIONS"\n    | "HEAD"\n\n  label = (alnum|"_")+\n  string  (a string literal) = "\\"" (~"\\"" ~"\\n" any)* "\\""\n  number  (a number literal)\n    = fraction\n    | whole\n  fraction = digit* "." digit+\n  whole = digit+\n  space += comment\n  comment\n    = multiLineComment\n    | singleLineComment\n  multiLineComment = "/*" (~"*/" any)* "*/"\n  singleLineComment = "//" (~"\\n" any)*\n}\n'},140:function(e,n,t){"use strict";t.r(n),n.default="node getClick = extractClickData, extractPlayerId\nnode extractXY = getXYCoordsFromClickData\nnode movePlayer = getPlayerById, detectPlayerMovementEvents, movePlayer, dispatchPlayerMovementEvents\nnode displayBoundaryError = getPlayerById, sendBoundaryError\nnode notifyRoom = getBroadcastMessage, getRoomByPlayerId, broadcastToRoom\n\nflow click(GET /click) = getClick$ -> extractXY#clickBranch\n\nclickBranch -Coordinates{ retry: 3 }> movePlayer*#move\n\nclickBranch -BoundaryError! displayBoundaryError\n\nclickBranch -> notifyRoom ... move\n"}}]);