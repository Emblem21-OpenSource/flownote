#!/bin/sh
#set -e
#trap "trap - TERM && kill -- -$$" INT TERM EXIT

force_color_prompt=yes

APP_NAME=FlowNote
NODE_ENV=production
FLOWNOTE_SERVER_HOST=localhost
FLOWNOTE_SERVER_PORT=8080
FLOWNOTE_SERVER_LOGGING=2
FLOWNOTE_APP_FILE_PATH=""
FLOWNOTE_JSON_FILE_PATH=""
FLOWNOTE_STANDALONE=0
FLOWNOTE_WATCH=0

. ./.env

NODE_MODULE_PATH="$(dirname "$(realpath -s $0)")/../flownote"

for ARGUMENT in "$@"
do
  KEY=$(echo $ARGUMENT | cut -f1 -d=)
  VALUE=$(echo $ARGUMENT | cut -f2 -d=)

  case "$KEY" in
    --host|-h) FLOWNOTE_SERVER_HOST=$VALUE;;
    --port|-p) FLOWNOTE_SERVER_PORT=$VALUE;;
    --log|-l) FLOWNOTE_SERVER_LOGGING=$VALUE;;
    --slient|-s) FLOWNOTE_SERVER_SILENT=1;;
    --flow|-f) FLOWNOTE_APP_FILE_PATH="$VALUE";;
    --json|-j) FLOWNOTE_JSON_FILE_PATH="$VALUE";;
    --standalone|-st) FLOWNOTE_STANDALONE=1;;
    --watch|-w) FLOWNOTE_WATCH=1;;
    *)
  esac
done

case $1 in
  start-stdin)
    NODE_EXECUTABLE="node"

    if [ "$FLOWNOTE_STANDALONE" = 1 ]; then \
      cd "$NODE_MODULE_PATH"
      FLOWNOTE_APP_FILE_PATH="../../$FLOWNOTE_APP_FILE_PATH"
    fi;

    if [ "$FLOWNOTE_WATCH" = 1 ]; then \
      NODE_EXECUTABLE="./node_modules/.bin/nodemon"
    fi;

    cd "$NODE_MODULE_PATH"
    FLOWNOTE_SERVER_TYPE=stdin \
    FLOWNOTE_SERVER_LOGGING=$FLOWNOTE_SERVER_LOGGING \
    FLOWNOTE_SERVER_SILENT=${FLOWNOTE_SERVER_SILENT:-0} \
    FLOWNOTE_APP_FILE_PATH="$FLOWNOTE_APP_FILE_PATH" \
    FLOWNOTE_JSON_FILE_PATH="$FLOWNOTE_JSON_FILE_PATH" \
    $NODE_EXECUTABLE server.js
    ;;
  start-http)
    NODE_EXECUTABLE="node"

    if [ "$FLOWNOTE_STANDALONE" = 1 ]; then \
      cd "$NODE_MODULE_PATH"
      FLOWNOTE_APP_FILE_PATH="../../$FLOWNOTE_APP_FILE_PATH"
    fi;

    if [ "$FLOWNOTE_WATCH" = 1 ]; then \
      NODE_EXECUTABLE="./node_modules/.bin/nodemon"
    fi;

    FLOWNOTE_SERVER_TYPE=http \
    FLOWNOTE_SERVER_HOST=$FLOWNOTE_SERVER_HOST \
    FLOWNOTE_SERVER_PORT=$FLOWNOTE_SERVER_PORT \
    FLOWNOTE_SERVER_LOGGING=$FLOWNOTE_SERVER_LOGGING \
    FLOWNOTE_SERVER_SILENT=${FLOWNOTE_SERVER_SILENT:-1} \
    FLOWNOTE_APP_FILE_PATH="$FLOWNOTE_APP_FILE_PATH" \
    FLOWNOTE_JSON_FILE_PATH="$FLOWNOTE_JSON_FILE_PATH" \
    $NODE_EXECUTABLE server.js
    ;;
  test)
    npm test
    ;;
  test-watch)
    npm run test-watch
    ;;
  test-coverage)
    npm run test-coverage
    ;;
  test-e2e)
    echo "Running Ava..."
    avaErrors=$(npm test 1>/dev/null)
    echo "Running HTTP..."
    httpErrors=$(timeout 3 ./flownote start-http 2>&1 > /dev/null)   
    echo "Building browser version..."
    browserBuildErrors=$(node --no-deprecation ./node_modules/.bin/webpack --no-progress --display=errors-only --mode production --colors 2>&1 > /dev/null)
    echo "Testing browser version..."
    browserRunErrors=$(node -e 'global.window = {}; require("./dist/flownote.min.js")' 2>&1 > /dev/null)
    echo "Purging old Docker instances..."
    ./flownote purge-all-docker 2>&1 > /dev/null
    echo "Building Docker..."
    dockerBuildErrors=$(./flownote build-docker 2>&1 > /dev/null)
    echo "Running Docker..."
    dockerRunErrors=$(./flownote start-docker-http 2>&1 > /dev/null)
    httpOutput=$(wget -qO- http://$FLOWNOTE_SERVER_HOST/click?click[x]=10)

    echo "Ava:             ${avaErrors:-OK}"
    echo "HTTP:            ${httpErrors:-OK}"
    echo "Browser Build:   ${browserBuildErrors:-OK}"
    echo "Browser Run:     ${browserRunErrors:-OK}"
    echo "Docker Build:    ${dockerBuildErrors:-OK}"
    echo "Docker Run:      ${dockerRunErrors:-OK}"
    
    if [ "$httpOutput" = '{"state":{"click":{"x":"10"},"clickX":"10","player":{"name":"Alice","x":"1010","y":null}}}' ]; then \
      echo "Docker Request:  OK"
    else
      echo "Docker Request:  Failed"
    fi;
    ;;
  profile)
    npm run profiler
    ;;
  profile-explorer)
    npm run profiler-explorer
    ;;
  build-browser)
    npm run browser-build
    ;;
  build-browser-watch)
    npm run browser-test
    ;;
  reinstall)
    npm run reinstall
    ;;
  compile)
    ./compile $2
    ;;
  update-dockerhub)
    docker tag $APP_NAME:latest $APP_NAME:latest
    docker push $APP_NAME:latest
    ;;
  flownote-docker)
    cd $NODE_MODULE_PATH
    docker build -t $DOCKER_TAG --build-arg NODE_ENV=$NODE_ENV -f Dockerfile .
    ;;
  build-docker)
    ./flownote compile "$FLOWNOTE_APP_FILE_PATH" > __app__.flow-json
    docker build -t $DOCKER_TAG --build-arg NODE_ENV=$NODE_ENV .
    rm __app__.flow-json
    ;;
  start-docker-stdin)
    docker run -d --name=$DOCKER_PROCESS_NAME --env-file .env $DOCKER_TAG
    socat EXEC:"docker attach $DOCKER_TAG",pty STDIO
    ;;
  start-docker-http)
    docker run -d --name=$DOCKER_PROCESS_NAME -p 80:$FLOWNOTE_SERVER_PORT/tcp -p 443:443/tcp -P --env-file .env --expose=$FLOWNOTE_SERVER_PORT -ti $DOCKER_TAG
    ;;
  stop-docker)
    docker stop $DOCKER_PROCESS_NAME
    ;;
  remove-docker)
    docker rm $DOCKER_PROCESS_NAME
    ;;
  restart-docker)
    docker restart $DOCKER_PROCESS_NAME
    ;;
  logs)
    docker logs -f $DOCKER_PROCESS_NAME
    ;;
  cli-docker)
    docker run -it --entrypoint /bin/sh $DOCKER_TAG
    ;;
  clean-rebuild-docker)
    docker build --build-arg NODE_ENV=$NODE_ENV --no-cache=true --rm=true -t $DOCKER_TAG .
    ;;
  purge-docker)
    docker stop $DOCKER_PROCESS_NAME
    docker rm $DOCKER_PROCESS_NAME
    docker rmi $DOCKER_TAG
    ;;
  purge-docker-containers)
    docker stop $(docker ps -a -q)
    docker rm $(docker ps -a -q)
    ;;
  purge-all-docker)
    docker stop $(docker ps -a -q)
    docker rm $(docker ps -a -q)
    docker rmi $(docker images -a -q)
    ;;
  *)
    printf "\e[38;5;166mUsage: \e[38;5;72m$0 \e[38;5;106m[flags] [an operation below]\n"
    printf "\n"
    printf "\e[38;5;201mFlags\n"
    printf "  \e[38;5;123m--host=, -h=              \e[38;5;178mSets the hostname for HTTP mode.\n"
    printf "  \e[38;5;123m--port=, -p=              \e[38;5;178mSets the port for HTTP mode.\n"
    printf "  \e[38;5;123m--log=, -l=               \e[38;5;178mSets logging verbosity (1=errors, 2=warning, 3=info, 4=debug).\n"
    printf "  \e[38;5;123m--flow=, -f=              \e[38;5;178mThe path of FlowNote file to use.\n"
    printf "  \e[38;5;123m--json=, -j=              \e[38;5;178mThe path of a Application JSON to use.\n"
    printf "  \e[38;5;123m--silent, -s              \e[38;5;178mSupresses $APP_NAME event emission.\n"
    printf "\n"
    printf "\e[38;5;201mDevelopment Operations \e[38;5;47m(\e[38;5;251mRequires a NodeJS environment\e[38;5;47m)\n"
    printf "  \e[38;5;123mstart-stdin               \e[38;5;178mStarts a $APP_NAME app that responds to stdin requests. (Accepts --standalone and --watch)\n"
    printf "  \e[38;5;123mstart-http                \e[38;5;178mStarts a $APP_NAME app that responds to HTTP requests. (Accepts --standalone and --watch)\n"
    printf "  \e[38;5;123mcompile                   \e[38;5;178mCompiles a $APP_NAME file into a JSON application.\n"
    printf "  \e[38;5;123mtest                      \e[38;5;178mRuns the test suite.\n"
    printf "  \e[38;5;123mtest-watch                \e[38;5;178mRuns the test suite every time code changes.\n"
    printf "  \e[38;5;123mtest-coverage             \e[38;5;178mRuns the test suite and generates a code coverage report.\n"
    printf "  \e[38;5;123mtest-e2e                  \e[38;5;178mRuns a comprehensive test suite. (To be used before a release.)\n"
    printf "  \e[38;5;123mprofile                   \e[38;5;178mRuns a profiler and generates a performance report.\n"
    printf "  \e[38;5;123mprofile-explorer          \e[38;5;178mRuns a profiler and generates a very detailed performance report.\n"
    printf "  \e[38;5;123mbuild-browser             \e[38;5;178mBuilds $APP_NAME for the browser.\n"
    printf "  \e[38;5;123mbuild-browser-watch       \e[38;5;178mBuilds $APP_NAME for the browser every time code changes.\n"
    printf "  \e[38;5;123mreinstall                 \e[38;5;178mReinstalls all dependencies for $APP_NAME.\n"
    printf "  \e[38;5;123mupdate-dockerhub          \e[38;5;178mPushes Dockerfile changes up to $APP_NAME's DockerHub.\n"
    printf "\n"
    printf "\e[38;5;201mDocker Operations \e[38;5;47m(\e[38;5;251mRequires Docker. Please see the documentation for configuration options.\e[38;5;47m)\n"
    printf "  \e[38;5;123mflownote-docker           \e[38;5;178mBuilds a standalone $APP_NAME Docker image for separate projects.\n"
    printf "  \e[38;5;123mbuild-docker              \e[38;5;178mBuilds a $APP_NAME Docker image.\n"
    printf "  \e[38;5;123mstart-docker-stdin        \e[38;5;178mStarts the $APP_NAME Docker process accepting stdin requests.\n"
    printf "  \e[38;5;123mstart-docker-http         \e[38;5;178mStarts the $APP_NAME Docker process accepting HTTP requests.\n"
    printf "  \e[38;5;123mstop-docker               \e[38;5;178mStops the $APP_NAME Docker process.\n"
    printf "  \e[38;5;123mremove-docker             \e[38;5;178mRemoes the $APP_NAME Docker process.\n"
    printf "  \e[38;5;123mrestart-docker            \e[38;5;178mRestarts the $APP_NAME Docker process.\n"
    printf "  \e[38;5;123mlogs-docker               \e[38;5;178mFollows the logs for the $APP_NAME Docker process.\n"
    printf "  \e[38;5;123mcli-docker                \e[38;5;178mStarts the CLI for the $APP_NAME Docker process.\n"
    printf "  \e[38;5;123mclean-rebuild-docker      \e[38;5;178mRebuilds the $APP_NAME Docker image and bypasses the cache.\n"
    printf "  \e[38;5;123mpurge-docker              \e[38;5;178mDeletes the $APP_NAME Docker process and image.\n"
    printf "  \e[38;5;123mpurge-docker-containers   \e[38;5;178mDeletes all Docker conatiners.  \e[38;5;196mBE CAREFUL!\n"
    printf "  \e[38;5;123mpurge-all-docker          \e[38;5;178mDeletes all images and containers.  \e[38;5;196mBE CAREFUL!\n"
    echo ""
    ;;
esac