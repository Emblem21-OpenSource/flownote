#!/bin/sh

APP_NAME=FlowNote
NODE_ENV=production
FLOWNOTE_SERVER_HOST=localhost
FLOWNOTE_SERVER_PORT=8080
FLOWNOTE_SERVER_LOGGING=2
FLOWNOTE_APP_FILE_PATH=""
FLOWNOTE_ACTIONS_FILE_PATH=""

. ./.env

NODE_MODULE_PATH="$(dirname $(realpath -s $0))/../flownote"

for ARGUMENT in "$@"
do
  KEY=$(echo $ARGUMENT | cut -f1 -d=)
  VALUE=$(echo $ARGUMENT | cut -f2 -d=)

  case "$KEY" in
    --host|-h) FLOWNOTE_SERVER_HOST=$VALUE;;
    --port|-p) FLOWNOTE_SERVER_PORT=$VALUE;;
    --log|-l) FLOWNOTE_SERVER_LOGGING=$VALUE;;
    --slient|-s) FLOWNOTE_SERVER_SILENT=1;;
    --flow|-f) FLOWNOTE_APP_FILE_PATH=$VALUE;;
    --actions|-a) FLOWNOTE_ACTIONS_FILE_PATH=$VALUE;;
    *)
  esac    
done

case $1 in
  standalone-stdin)
    cd $NODE_MODULE_PATH
    FLOWNOTE_SERVER_TYPE=stdin \
    FLOWNOTE_SERVER_LOGGING=$FLOWNOTE_SERVER_LOGGING \
    FLOWNOTE_SERVER_SILENT=${FLOWNOTE_SERVER_SILENT:-0} \
    FLOWNOTE_APP_FILE_PATH=../../$FLOWNOTE_APP_FILE_PATH \
    FLOWNOTE_ACTIONS_FILE_PATH=../../$FLOWNOTE_ACTIONS_FILE_PATH \
    node index.js
    ;;
  standalone-http)
    cd $NODE_MODULE_PATH
    FLOWNOTE_SERVER_TYPE=http \
    FLOWNOTE_SERVER_HOST=$FLOWNOTE_SERVER_HOST \
    FLOWNOTE_SERVER_PORT=$FLOWNOTE_SERVER_PORT \
    FLOWNOTE_SERVER_LOGGING=$FLOWNOTE_SERVER_LOGGING \
    FLOWNOTE_SERVER_SILENT=${FLOWNOTE_SERVER_SILENT:-1} \
    FLOWNOTE_APP_FILE_PATH=../../$FLOWNOTE_APP_FILE_PATH \
    FLOWNOTE_ACTIONS_FILE_PATH=../../$FLOWNOTE_ACTIONS_FILE_PATH \
    node index.js
    ;;
  start-stdin)
    FLOWNOTE_SERVER_TYPE=stdin \
    FLOWNOTE_SERVER_LOGGING=$FLOWNOTE_SERVER_LOGGING \
    FLOWNOTE_SERVER_SILENT=${FLOWNOTE_SERVER_SILENT:-0} \
    FLOWNOTE_APP_FILE_PATH=$FLOWNOTE_APP_FILE_PATH \
    FLOWNOTE_ACTIONS_FILE_PATH=$FLOWNOTE_ACTIONS_FILE_PATH \
    node index.js
    ;;
  start-http)
    FLOWNOTE_SERVER_TYPE=http \
    FLOWNOTE_SERVER_HOST=$FLOWNOTE_SERVER_HOST \
    FLOWNOTE_SERVER_PORT=$FLOWNOTE_SERVER_PORT \
    FLOWNOTE_SERVER_LOGGING=$FLOWNOTE_SERVER_LOGGING \
    FLOWNOTE_SERVER_SILENT=${FLOWNOTE_SERVER_SILENT:-1} \
    FLOWNOTE_APP_FILE_PATH=$FLOWNOTE_APP_FILE_PATH \
    FLOWNOTE_ACTIONS_FILE_PATH=$FLOWNOTE_ACTIONS_FILE_PATH \
    node index.js
    ;;
  test)
    npm test
    ;;
  test-watch)
    npm run test-watch
    ;;
  test-coverage)
    npm run test-coverage
    ;;
  profile)
    npm run profiler
    ;;
  profile-explorer)
    npm run profiler-explorer
    ;;
  build-browser)
    npm run browser-build
    ;;
  build-browser-watch)
    npm run browser-test
    ;;
  reinstall)
    npm run reinstall
    ;;
  compile)
    ./compile $2
    ;;
  update-dockerhub)
    docker tag $APP_NAME:latest $APP_NAME:latest
    docker push $APP_NAME:latest
    ;;
  flownote-docker)
    cd $NODE_MODULE_PATH
    docker build -t $DOCKER_TAG --build-arg NODE_ENV=$NODE_ENV -f Dockerfile .
    ;;
  build-docker)
    docker build -t $DOCKER_TAG --build-arg NODE_ENV=$NODE_ENV .
    ;;
  start-docker-stdin)
    docker run -d --name=$DOCKER_PROCESS_NAME --env-file .env $DOCKER_TAG
    socat EXEC:"docker attach $DOCKER_TAG",pty STDIO
    ;;
  start-docker-http)
    docker run -d --name=$DOCKER_PROCESS_NAME -p 80:$FLOWNOTE_SERVER_PORT/tcp -p 443:443/tcp -P --env-file .env --expose=$FLOWNOTE_SERVER_PORT -ti $DOCKER_TAG
    ;;
  stop-docker)
    docker stop $DOCKER_PROCESS_NAME
    ;;
  remove-docker)
    docker rm $DOCKER_PROCESS_NAME
    ;;
  restart-docker)
    docker restart $DOCKER_PROCESS_NAME
    ;;
  logs)
    docker logs -f $DOCKER_PROCESS_NAME
    ;;
  cli-docker)
    docker run -it --entrypoint /bin/sh $DOCKER_TAG
    ;;
  clean-rebuild-docker)
    docker build --build-arg NODE_ENV=$NODE_ENV --no-cache=true --rm=true -t $DOCKER_TAG .
    ;;
  purge-docker)
    docker stop $DOCKER_PROCESS_NAME
    docker rm $DOCKER_PROCESS_NAME
    docker rmi $DOCKER_TAG
    ;;
  purge-docker-containers)
    docker stop $(docker ps -a -q)
    docker rm $(docker ps -a -q)
    ;;
  purge-all-docker)
    docker stop $(docker ps -a -q)
    docker rm $(docker ps -a -q)
    docker rmi $(docker images -a -q)
    ;;
  *)
    printf "\e[38;5;166mUsage: \e[38;5;72m$0 \e[38;5;106m[flags] [an operation below]\n"
    printf "\n"
    printf "\e[38;5;201mFlags\n"
    printf "  \e[38;5;123m--host=, -h=              \e[38;5;178mSets the hostname for HTTP mode.\n"
    printf "  \e[38;5;123m--port=, -p=              \e[38;5;178mSets the port for HTTP mode.\n"
    printf "  \e[38;5;123m--log=, -l=               \e[38;5;178mSets logging verbosity (1=errors, 2=warning, 3=info, 4=debug).\n"
    printf "  \e[38;5;123m--flow=, -f=              \e[38;5;178mThe path of FlowNote file to use.\n"
    printf "  \e[38;5;123m--actions=, -a=           \e[38;5;178mThe path of the module containing all actions to register.\n"
    printf "  \e[38;5;123m--silent, -s              \e[38;5;178mSupresses $APP_NAME event emission.\n"
    printf "\n"
    printf "\e[38;5;201mDevelopment Operations \e[38;5;47m(\e[38;5;251mRequires a NodeJS environment\e[38;5;47m)\n"
    printf "  \e[38;5;123mstandalone-stdin          \e[38;5;178mStarts a $APP_NAME app as an external application for stdin events. (Silent is off by default)\n"
    printf "  \e[38;5;123mstandalone-http           \e[38;5;178mStarts a $APP_NAME app as an external application for HTTP events. (Silent is on by default)\n"
    printf "  \e[38;5;123mstart-stdin               \e[38;5;178mStarts a $APP_NAME app that responds to stdin events. (Silent is off by default)\n"
    printf "  \e[38;5;123mstart-http                \e[38;5;178mStarts a $APP_NAME app that responds to HTTP events. (Silent is on by default)\n"
    printf "  \e[38;5;123mcompile                   \e[38;5;178mCompiles a $APP_NAME file into a JSON application.\n"
    printf "  \e[38;5;123mtest                      \e[38;5;178mRuns the test suite.\n"
    printf "  \e[38;5;123mtest-watch                \e[38;5;178mRuns the test suite every time code changes.\n"
    printf "  \e[38;5;123mtest-coverage             \e[38;5;178mRuns the test suite  and generates a code coverage report.\n"
    printf "  \e[38;5;123mprofile                   \e[38;5;178mRuns a profiler and generates a performance report.\n"
    printf "  \e[38;5;123mprofile-explorer          \e[38;5;178mRuns a profiler and generates a very detailed performance report.\n"
    printf "  \e[38;5;123mbuild-browser             \e[38;5;178mBuilds $APP_NAME for the browser.\n"
    printf "  \e[38;5;123mbuild-browser-watch       \e[38;5;178mBuilds $APP_NAME for the browser every time code changes.\n"
    printf "  \e[38;5;123mreinstall                 \e[38;5;178mReinstalls all dependencies for $APP_NAME.\n"
    printf "  \e[38;5;123mupdate-dockerhub          \e[38;5;178mPushes Dockerfile changes up to $APP_NAME's DockerHub.\n"
    printf "\n"
    printf "\e[38;5;201mDocker Operations \e[38;5;47m(\e[38;5;251mRequires Docker. Please see the documentation for configuration options.\e[38;5;47m)\n"
    printf "  \e[38;5;123mflownote-docker           \e[38;5;178mBuilds a standalone $APP_NAME Docker image for separate projects.\n"
    printf "  \e[38;5;123mbuild-docker              \e[38;5;178mBuilds a $APP_NAME Docker image.\n"
    printf "  \e[38;5;123mstart-docker-stdin        \e[38;5;178mStarts the $APP_NAME Docker process accepting stdin requests.\n"
    printf "  \e[38;5;123mstart-docker-http         \e[38;5;178mStarts the $APP_NAME Docker process accepting HTTP requests.\n"
    printf "  \e[38;5;123mstop-docker               \e[38;5;178mStops the $APP_NAME Docker process.\n"
    printf "  \e[38;5;123mremove-docker             \e[38;5;178mRemoes the $APP_NAME Docker process.\n"
    printf "  \e[38;5;123mrestart-docker            \e[38;5;178mRestarts the $APP_NAME Docker process.\n"
    printf "  \e[38;5;123mlogs-docker               \e[38;5;178mFollows the logs for the $APP_NAME Docker process.\n"
    printf "  \e[38;5;123mcli-docker                \e[38;5;178mStarts the CLI for the $APP_NAME Docker process.\n"
    printf "  \e[38;5;123mclean-rebuild-docker      \e[38;5;178mRebuilds the $APP_NAME Docker image and bypasses the cache.\n"
    printf "  \e[38;5;123mpurge-docker              \e[38;5;178mDeletes the $APP_NAME Docker process and image.\n"
    printf "  \e[38;5;123mpurge-docker-containers   \e[38;5;178mDeletes all Docker conatiners.  \e[38;5;196mBE CAREFUL!\n"
    printf "  \e[38;5;123mpurge-all-docker          \e[38;5;178mDeletes all images and containers.  \e[38;5;196mBE CAREFUL!\n"
    echo ""
    ;;
esac